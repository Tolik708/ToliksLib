#ifndef TOLIK_KEY_ID_HPP
#define TOLIK_KEY_ID_HPP

#include <stdint.h>

#include "Tolik/Setup.hpp"

#include "Tolik/Utilities/EnumFunctions.hpp"

namespace Tolik
{
// + 1 because each enum has NONE state

constexpr uint32_t KeyIDCount         = 245 + 1;
constexpr uint32_t ModKeyCount        = 12  + 1;
constexpr uint32_t MouseButtonIDCount = 3   + 1;
constexpr uint32_t InputAxisCount     = 3   + 1;

// KeyID is enum with names of scancodes
// To check for other keys like question mark '?' you need to check for modifier key shift and slash.
// You can just combine KeyID with KeyMod when checking for example for GetKeyDown(KeyID::Slash | KeyMod::SHIFT)
// NP_ - num pad
enum class KeyID : uint32_t
{
  NONE = 0,

  A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,
  _1, _2, _3, _4, _5, _6, _7, _8, _9, _0, 
  Return,
  Escape,
  Backspace,
  Tab,
  Space,
  Minus,
  Equal,
  Leftbracket,
  Rightbracket,
  Backslash,
  Nonushash,
  Semicolon,
  Apostrophe,
  Grave,
  Comma,
  Period,
  Slash,
  Capslock,
  F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24,
  Printscreen,
  Scrollock,
  Pause,
  Insert,
  Home,
  Pageup,
  Delete,
  End,
  Pagedown,
  Right,
  Left,
  Down,
  Up,
  Numlock,
  NP_Divide,
  NP_Multiply,
  NP_Minus,
  NP_Plus,
  NP_Enter,
  NP_Period,
  NP_Equals,
  NP_Comma,
  NP_Equalsas400,
  NP_Leftparen,
  NP_Rightparen,
  NP_Leftbrace,
  NP_Rightbrace,
  NP_Tab,
  NP_Backspace,
  NP_A,
  NP_B,
  NP_C,
  NP_D,
  NP_E,
  NP_F,
  NP_Xor,
  NP_Power,
  NP_Percent,
  NP_Less,
  NP_Greater,
  NP_Ampersand,
  NP_Dblampersand,
  NP_Verticalbar,
  NP_Dblverticalbar,
  NP_Colon,
  NP_Hash,
  NP_Space,
  NP_At,
  NP_Exclam,
  NP_Memstore,
  NP_Memrecall,
  NP_Memclear,
  NP_Memadd,
  NP_Memsubstract,
  NP_Memmultiply,
  NP_Memdivide,
  NP_Plusminus,
  NP_Clear,
  NP_Clearentry,
  NP_Binary,
  NP_Octal,
  NP_Decimal,
  NP_Hexadecimal,
  NP_1, NP_2, NP_3, NP_4, NP_5, NP_6, NP_7, NP_8, NP_9, NP_0, NP_00, NP_000,
  Nonusbackslash,
  Application,
  Power,
  Execute,
  Help,
  Menu,
  Select,
  Stop,
  Again,
  Undo,
  Cut,
  Copy,
  Paste,
  Find,
  Mute,
  Volumeup,
  Volumedown,
  International1, International2, International3, International4, International5, International6, International7, International8, International9,
  Lang1, Lang2, Lang3, Lang4, Lang5, Lang6, Lang7, Lang8, Lang9,
  Alterase,
  Sysreq,
  Cancle,
  Clear,
  Prior,
  Return2,
  Separation,
  Out,
  Oper,
  Clearagain,
  Crsel,
  Exsel,
  Thousandsseparator,
  Decimalseparator,
  Currencyunit,
  Currencysubunit,
  Lctrl, Lshift, Lalt, Lgui, Rctrl, Rshift, Ralt, Rgui,
  Audionext,
  Audioprev,
  Audiostop,
  Audioplay,
  Audiomute,
  Mediaselect,
  WWW,
  Mail,
  Calculator,
  Computer,
  AC_Search,
  AC_Home,
  AC_Back,
  AC_Forward,
  AC_Stop,
  AC_Refresh,
  AC_Bookmarks,
  Brightnessdown,
  Brightnessup,
  Displayswitch,
  Kbdillumtoggle,
  Kbdillumdown,
  Kbdillumup,
  Eject,
  Sleep,
  App1,
  App2,
  Audiorewind,
  Audionfastforward,
  Softleft,
  Softright,
  Call,
  Endcall,
};

enum class KeyMod : uint32_t
{
  NONE = 0,

  // + 8 to be able to combine it with KeyID and KeyState

  LSHIFT     = TOLIK_BIT(0  + 8),
  RSHIFT     = TOLIK_BIT(1  + 8),
  LCTRL      = TOLIK_BIT(2  + 8),
  RCTRL      = TOLIK_BIT(3  + 8),
  LALT       = TOLIK_BIT(4  + 8),
  RALT       = TOLIK_BIT(5  + 8),
  LGUI       = TOLIK_BIT(6  + 8),
  RGUI       = TOLIK_BIT(7  + 8),
  SCROLLLOCK = TOLIK_BIT(8  + 8),
  CAPSLOCK   = TOLIK_BIT(9  + 8),
  NUMLOCK    = TOLIK_BIT(10 + 8),
  MODE       = TOLIK_BIT(11 + 8),

  CTRL  = LCTRL | RCTRL,
  SHIFT = LSHIFT | RSHIFT,
  ALT   = LALT | RALT,
  GUI   = LGUI | RGUI
};

// No difference with SDL2's yet.
enum class MouseButtonID : uint8_t
{
  NONE,

  Left, Middle, Right,
};

enum class InputAxis : uint8_t
{
  NONE = 0,

  MouseWheel, MouseDelta, MousePosition,
};

enum class KeyState : uint32_t
{
  NONE = 0,

  Pressed = TOLIK_BIT(0),
  Down    = TOLIK_BIT(1),
  Up      = TOLIK_BIT(2),
};

namespace Detail
{
constexpr KeyID SDLScancodeToKeyID[] =
{
  KeyID::NONE,
  KeyID::NONE,
  KeyID::NONE,
  KeyID::NONE,
  KeyID::A,
  KeyID::B,
  KeyID::C,
  KeyID::D,
  KeyID::E,
  KeyID::F,
  KeyID::G,
  KeyID::H,
  KeyID::I,
  KeyID::J,
  KeyID::K,
  KeyID::L,
  KeyID::M,
  KeyID::N,
  KeyID::O,
  KeyID::P,
  KeyID::Q,
  KeyID::R,
  KeyID::S,
  KeyID::T,
  KeyID::U,
  KeyID::V,
  KeyID::W,
  KeyID::X,
  KeyID::Y,
  KeyID::Z,
  KeyID::_1,
  KeyID::_2,
  KeyID::_3,
  KeyID::_4,
  KeyID::_5,
  KeyID::_6,
  KeyID::_7,
  KeyID::_8,
  KeyID::_9,
  KeyID::_0,
  KeyID::Return,
  KeyID::Escape,
  KeyID::Backspace,
  KeyID::Tab,
  KeyID::Space,
  KeyID::Minus,
  KeyID::Equal,
  KeyID::Leftbracket,
  KeyID::Rightbracket,
  KeyID::Backslash,
  KeyID::Nonushash,
  KeyID::Semicolon,
  KeyID::Apostrophe,
  KeyID::Grave,
  KeyID::Comma,
  KeyID::Period,
  KeyID::Slash,
  KeyID::Capslock,
  KeyID::F1,
  KeyID::F2,
  KeyID::F3,
  KeyID::F4,
  KeyID::F5,
  KeyID::F6,
  KeyID::F7,
  KeyID::F8,
  KeyID::F9,
  KeyID::F10,
  KeyID::F11,
  KeyID::F12,
  KeyID::Printscreen,
  KeyID::Scrollock,
  KeyID::Pause,
  KeyID::Insert,
  KeyID::Home,
  KeyID::Pageup,
  KeyID::Delete,
  KeyID::End,
  KeyID::Pagedown,
  KeyID::Right,
  KeyID::Left,
  KeyID::Down,
  KeyID::Up,
  KeyID::Numlock,
  KeyID::NP_Divide,
  KeyID::NP_Multiply,
  KeyID::NP_Minus,
  KeyID::NP_Plus,
  KeyID::NP_Enter,
  KeyID::NP_1,
  KeyID::NP_2,
  KeyID::NP_3,
  KeyID::NP_4,
  KeyID::NP_5,
  KeyID::NP_6,
  KeyID::NP_7,
  KeyID::NP_8,
  KeyID::NP_9,
  KeyID::NP_0,
  KeyID::NP_Period,
  KeyID::Nonusbackslash,
  KeyID::Application,
  KeyID::Power,
  KeyID::NP_Equals,
  KeyID::F13,
  KeyID::F14,
  KeyID::F15,
  KeyID::F16,
  KeyID::F17,
  KeyID::F18,
  KeyID::F19,
  KeyID::F20,
  KeyID::F21,
  KeyID::F22,
  KeyID::F23,
  KeyID::F24,
  KeyID::Execute,
  KeyID::Help,
  KeyID::Menu,
  KeyID::Select,
  KeyID::Stop,
  KeyID::Again,
  KeyID::Undo,
  KeyID::Cut,
  KeyID::Copy,
  KeyID::Paste,
  KeyID::Find,
  KeyID::Mute,
  KeyID::Volumeup,
  KeyID::Volumedown,
  KeyID::NONE,
  KeyID::NONE,
  KeyID::NONE,
  KeyID::NP_Comma,
  KeyID::NP_Equalsas400,
  KeyID::International1,
  KeyID::International2,
  KeyID::International3,
  KeyID::International4,
  KeyID::International5,
  KeyID::International6,
  KeyID::International7,
  KeyID::International8,
  KeyID::International9,
  KeyID::Lang1,
  KeyID::Lang2,
  KeyID::Lang3,
  KeyID::Lang4,
  KeyID::Lang5,
  KeyID::Lang6,
  KeyID::Lang7,
  KeyID::Lang8,
  KeyID::Lang9,
  KeyID::Alterase,
  KeyID::Sysreq,
  KeyID::Cancle,
  KeyID::Clear,
  KeyID::Prior,
  KeyID::Return2,
  KeyID::Separation,
  KeyID::Out,
  KeyID::Oper,
  KeyID::Clearagain,
  KeyID::Crsel,
  KeyID::Exsel,
  KeyID::NONE,
  KeyID::NONE,
  KeyID::NONE,
  KeyID::NONE,
  KeyID::NONE,
  KeyID::NONE,
  KeyID::NONE,
  KeyID::NONE,
  KeyID::NONE,
  KeyID::NONE,
  KeyID::NONE,
  KeyID::NP_00,
  KeyID::NP_000,
  KeyID::Thousandsseparator,
  KeyID::Decimalseparator,
  KeyID::Currencyunit,
  KeyID::Currencysubunit,
  KeyID::NP_Leftparen,
  KeyID::NP_Rightparen,
  KeyID::NP_Leftbrace,
  KeyID::NP_Rightbrace,
  KeyID::NP_Tab,
  KeyID::NP_Backspace,
  KeyID::NP_A,
  KeyID::NP_B,
  KeyID::NP_C,
  KeyID::NP_D,
  KeyID::NP_E,
  KeyID::NP_F,
  KeyID::NP_Xor,
  KeyID::NP_Power,
  KeyID::NP_Percent,
  KeyID::NP_Less,
  KeyID::NP_Greater,
  KeyID::NP_Ampersand,
  KeyID::NP_Dblampersand,
  KeyID::NP_Verticalbar,
  KeyID::NP_Dblverticalbar,
  KeyID::NP_Colon,
  KeyID::NP_Hash,
  KeyID::NP_Space,
  KeyID::NP_At,
  KeyID::NP_Exclam,
  KeyID::NP_Memstore,
  KeyID::NP_Memrecall,
  KeyID::NP_Memclear,
  KeyID::NP_Memadd,
  KeyID::NP_Memsubstract,
  KeyID::NP_Memmultiply,
  KeyID::NP_Memdivide,
  KeyID::NP_Plusminus,
  KeyID::NP_Clear,
  KeyID::NP_Clearentry,
  KeyID::NP_Binary,
  KeyID::NP_Octal,
  KeyID::NP_Decimal,
  KeyID::NP_Hexadecimal,
  KeyID::NONE,
  KeyID::NONE,
  KeyID::Lctrl,
  KeyID::Lshift,
  KeyID::Lalt,
  KeyID::Lgui,
  KeyID::Rctrl,
  KeyID::Rshift,
  KeyID::Ralt,
  KeyID::Rgui,
  KeyID::Audionext,
  KeyID::Audioprev,
  KeyID::Audiostop,
  KeyID::Audioplay,
  KeyID::Audiomute,
  KeyID::Mediaselect,
  KeyID::WWW,
  KeyID::Mail,
  KeyID::Calculator,
  KeyID::Computer,
  KeyID::AC_Search,
  KeyID::AC_Home,
  KeyID::AC_Back,
  KeyID::AC_Forward,
  KeyID::AC_Stop,
  KeyID::AC_Refresh,
  KeyID::AC_Bookmarks,
  KeyID::Brightnessdown,
  KeyID::Brightnessup,
  KeyID::Displayswitch,
  KeyID::Kbdillumtoggle,
  KeyID::Kbdillumdown,
  KeyID::Kbdillumup,
  KeyID::Eject,
  KeyID::Sleep,
  KeyID::App1,
  KeyID::App2,
  KeyID::Audiorewind,
  KeyID::Audionfastforward,
  KeyID::Softleft,
  KeyID::Softright,
  KeyID::Call,
  KeyID::Endcall
};

constexpr inline KeyMod KeyModLookup(int sdlKeyMod)
{
  // Values were taken directly from source code
  switch(sdlKeyMod)
  {
    default: return KeyMod::NONE;
    case 0x0001: return KeyMod::LSHIFT;
    case 0x0002: return KeyMod::RSHIFT;
    case 0x0040: return KeyMod::LCTRL;
    case 0x0080: return KeyMod::RCTRL;
    case 0x0100: return KeyMod::LALT;
    case 0x0200: return KeyMod::RALT;
    case 0x0400: return KeyMod::LGUI;
    case 0x0800: return KeyMod::RGUI;
    case 0x1000: return KeyMod::NUMLOCK;
    case 0x2000: return KeyMod::CAPSLOCK;
    case 0x4000: return KeyMod::MODE;
    case 0x8000: return KeyMod::SCROLLLOCK;
  }
}
}

constexpr inline KeyID SDLScancodeToKeyID(int index) { return Detail::SDLScancodeToKeyID[index]; }
constexpr inline KeyMod SDLKeyModToKeyMod(int keymod)
{
  return Detail::KeyModLookup(keymod & 0x0001) | Detail::KeyModLookup(keymod & 0x0002) |
         Detail::KeyModLookup(keymod & 0x0040) | Detail::KeyModLookup(keymod & 0x0080) |
         Detail::KeyModLookup(keymod & 0x0100) | Detail::KeyModLookup(keymod & 0x0200) |
         Detail::KeyModLookup(keymod & 0x0400) | Detail::KeyModLookup(keymod & 0x0800) |
         Detail::KeyModLookup(keymod & 0x1000) | Detail::KeyModLookup(keymod & 0x2000) |
         Detail::KeyModLookup(keymod & 0x4000) | Detail::KeyModLookup(keymod & 0x8000);
}
}

#endif